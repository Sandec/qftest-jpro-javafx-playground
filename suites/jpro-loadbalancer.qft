<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE RootStep>
<RootStep id="_0" indentation="0" linelength="160" name="root" version="8.0.1">
<include>qfs.qft</include>
<variable name="JProServerStartupMessage">Tomcat started on port</variable>
<variable name="webmode">cdpdriver</variable>
<variable name="engine">fx</variable>
<variable name="client">jproClient</variable>
<variable name="url">http://localhost:8080</variable>
<DependencyReference id="_2YLC" reference="dependencies.JProDemoGestartet"/>
<TestSet id="_6" name="Base Test Group">
<DataDriver id="_2YZg">
<TableDataBinder id="_2YZh" name="variants">
<TableBinderColumn title="variant" width="141">
<data>web</data>
<data>web</data>
<data>web</data>
<data>web</data>
</TableBinderColumn>
<TableBinderColumn title="browser" width="153">
<data>chrome</data>
<data>firefox</data>
<data>edge</data>
<data>safari</data>
</TableBinderColumn>
<TableBinderColumn title="os" width="573">
<data>windows,linux,macos</data>
<data>windows,linux</data>
<data>windows</data>
<data>macos</data>
</TableBinderColumn>
</TableDataBinder>
</DataDriver>
<TestSet id="_2YZk" name="TheTests $(variant) $(browser) $(os)">
<comment>'$(os)' == '${qftest:os.name}'</comment>
<TestCase condition="rc.callProcedure(&#34;runOnSystem&#34;, [&#34;os&#34; : &#34;$(os)&#34;])" id="_2YXt" interpreter="groovy" name="Click Button and test">
<BasicSequence id="_2YXu" name="Setze Event-Optionen">
<ProcedureCall id="_2YXv" procedure="qfs.jib.options.replayFXHardMouseEventAs">
<variable name="clicktype">hard</variable>
</ProcedureCall>
<ProcedureCall id="_2YXw" procedure="qfs.jib.options.replayFXSoftMouseEventAs">
<variable name="clicktype">semihard</variable>
</ProcedureCall>
</BasicSequence>
<MouseEventStep clicks="1" client="$(client)" component="#Label:text=FXML" event="MOUSE_MPRC" hardevent="true" id="_2YXx" modifiers="16" x="26" y="19"/>
<MouseEventStep clicks="1" client="$(client)" component="#Button:" event="MOUSE_MPRC" hardevent="true" id="_2YXy" modifiers="16"/>
<CheckStringStep client="$(client)" component="#Label:name=label1" id="_2YXz">
<text>Welcome to FXML and JPro!</text>
</CheckStringStep>
</TestCase>
</TestSet>
</TestSet>
<PackageRoot id="_3">
<Package id="_2YHr" name="dependencies">
<Dependency forcedcleanup="true" id="_2YO5" name="JProServerStarted">
<discriminator>jobname</discriminator>
<variable name="JProServer">JPro</variable>
<variable name="JProServerStartupMessage"/>
<SetupSequence id="_2YO6" name="Start JProServer">
<ClientWaiter client="JProServers" id="_2YZe" local="true" raise="false" resvarname="isConnected" timeout="0"/>
<IfSequence id="_6wqN" interpreter="groovy" test="!$(isConnected)">
<ShellClientStarter client="JProServers" command="java -jar jpro-loadbalancer-0.14.0-SNAPSHOT.jar" directory="../runtime" id="_2Ybp"/>
<ProcedureCall disabled="true" id="_2YOK" procedure="qfs.utils.waitForClientOutput">
<variable name="client">JProServer</variable>
<variable name="expectedOutput">$(JProServerStartupMessage)</variable>
<variable name="timeout">${default:timeout:60000}</variable>
<variable name="polling">100</variable>
</ProcedureCall>
<IfSequence id="_2YOJ" name="Wait for server startup" test="&#34;$(variant)&#34;==&#34;web&#34;">
<BasicSequence id="_2Ybr">
<ProcedureCall id="_2YbQ" procedure="qfs.utils.waitForClientOutput">
<variable name="client">JProServers</variable>
<variable name="expectedOutput">$(JProServerStartupMessage)</variable>
<variable name="timeout">${default:timeout:60000}</variable>
<variable name="polling">1000</variable>
</ProcedureCall>
</BasicSequence>
<ElseSequence id="_2YOL">
<ClientWaiter client="JProServer" id="_2YbY"/>
</ElseSequence>
</IfSequence>
</IfSequence>
</SetupSequence>
<CleanupSequence id="_2YRQ">
<TryStep id="_2YTf" name="Sicher stellen, dass der JPro Client ebenfalls beendet ist">
<ClientStopper client="JProServer" id="_2YTg"/>
<ProcessWaiter client="JProServer" id="_2YTh" timeout="15000"/>
<CatchSequence exception="TestException" id="_2YTi" maxerror="0"/>
</TryStep>
</CleanupSequence>
</Dependency>
<Dependency forcedcleanup="true" id="_2YOR" name="OpenBrowser">
<discriminator>browser</discriminator>
<CommentStep id="_2YRF">
<heading>Zunächst muss der JPro Server gestartet werden</heading>
</CommentStep>
<DependencyReference id="_2YTe" reference="dependencies.JProServerStarted"/>
<SetupSequence id="_2YPI" name="Browser bei Bedarf starten">
<IfSequence id="_2YbM" interpreter="groovy" test="&#34;$(variant)&#34;==&#34;web&#34;">
<TryStep id="_2YPq" name="Client gestartet?">
<ClientWaiter client="webClient" id="_2YPp" timeout="1"/>
<CatchSequence exception="ClientNotConnectedException" id="_2YPr" maxerror="0" name="Client noch nicht gestartet -&gt; starten">
<IfSequence id="_1pHi" name="Besten Browser bestimmen" test="&#34;$(browser)&#34;==&#34;&#34;">
<ProcedureCall id="_1pIL" procedure="qfs.web.browser.general.getBestBrowser" retvarname="browser"/>
</IfSequence>
<BasicSequence id="_3NC" name="Web-Engine starten">
<BrowserClientStarter browser="$(browser)" client="webClient" connectionmode="${default:webmode:webdriver}" executable="${qftest:java}" id="_3ND"
                      openwindow="false"/>
<ClientWaiter client="webClient" id="_3NE"/>
</BasicSequence>
<BasicSequence id="_1pHV" name="Einstellungen für Browser setzen">
<ProcedureCall id="_1pHW" procedure="qfs.web.browser.settings.doStartupSettings">
<variable name="client">webClient</variable>
<variable name="browser">$(browser)</variable>
<variable name="emptyCache">true</variable>
<variable name="enableCookies">true</variable>
<variable name="deleteCookies">true</variable>
<variable name="locale">de</variable>
<variable name="enableProxy">false</variable>
<variable name="proxyAddress"/>
<variable name="proxyPort"/>
<variable name="proxyAutoconfigurl"/>
<variable name="enableProxyBypass">false</variable>
<variable name="proxyBypass"/>
<variable name="mozprofile"/>
<variable name="compatibilitymode">no</variable>
</ProcedureCall>
</BasicSequence>
<BasicSequence id="_1pHX" name="Browserfenster öffnen">
<BrowserClientStarter browser="${default:browser:chrome}" client="webClient" executable="${qftest:java}" height="900" id="_1pHY" openwindow="true"
                      url="$(url)"/>
<DocumentWaiter client="webClient" component="genericDocument" id="_1pHZ" timeout="60000"/>
</BasicSequence>
<BasicSequence id="_1pHa" name="CustomWebResolver installieren">
<InstallCWRStep client="webClient" engine="web" id="_2YPJ">
<code>ignoreTags:
- DIV
- SPAN
genericClasses: []</code>
<comment>Mit einem CustomWebResolver übersetzen Sie die Spezifika
der Komponenten Ihrer Webanwendung in generische Klassen,
die QF-Test versteht.
Dadurch werden die Komponentenerkennung drastisch verbessert
und spezifischere Checks ermöglicht.
Die wichtigste Kategorie ist "genericClasses". Hier können
Sie HTML-Elemente generischen Klassen zuweisen anhand deren
HTML-Tags, CSS-Klassen oder HTML-Attributen.
Für weitere Informationen und Beispiele wählen Sie "Was ist
das?" im Kontextmenü des Knotens.</comment>
</InstallCWRStep>
</BasicSequence>
</CatchSequence>
</TryStep>
</IfSequence>
</SetupSequence>
<CleanupSequence id="_2YOT" name="JPro Client beenden">
<IfSequence id="_2YbN" test="&#34;$(variant)&#34;==&#34;web&#34;">
<TryStep id="_2YOU" name="Verbindung zwischen Web und FX Clients lösen">
<ClientWaiter client="$(client)" engine="fx" id="_2YOV" timeout="0"/>
<ClientScriptStep client="$(client)" engine="fx" id="_2YOW">
<code>from de.qfs.apps.qftest.client import Client
Client.instance().setForeignPlayback(None)</code>
</ClientScriptStep>
<CatchSequence exception="ClientNotConnectedException" id="_2YOX" maxerror="0"/>
</TryStep>
<TryStep id="_2YS7" name="Browser schließen">
<WindowEventStep client="webClient" component="genericDocument" event="WINDOW_CLOSING" id="_2YS8"/>
<TryStep id="_2YS9" name="Browser beendet?">
<ProcessWaiter client="webClient" id="_2YSB" timeout="10000"/>
<CatchSequence exception="ClientNotTerminatedException" id="_2YSC" maxerror="0">
<TryStep id="_2YSD" name="Browser hart beenden">
<ClientStopper client="webClient" id="_2YSE"/>
<ProcessWaiter client="webClient" id="_2YSF" timeout="10000"/>
<CatchSequence exception="TestException" id="_2YSG" maxerror="0"/>
</TryStep>
</CatchSequence>
</TryStep>
<CatchSequence exception="TestException" id="_2YSH" maxerror="0"/>
</TryStep>
</IfSequence>
</CleanupSequence>
</Dependency>
<Dependency id="_2YVT" name="JProDemoGestartet">
<discriminator>engine</discriminator>
<variable name="engine">fx</variable>
<variable name="JProServer">JPro</variable>
<CommentStep id="_2YVU">
<heading>Zunächst müssen der JPro server und der Browser gestartet sein</heading>
</CommentStep>
<DependencyReference id="_2YVV" reference="dependencies.OpenBrowser">
<variable name="height">900</variable>
</DependencyReference>
<SetupSequence id="_2YVW" name="JPro FX Client und Web Client miteinander verbinden">
<variable name="connected">false</variable>
<variable name="newclient">false</variable>
<IfSequence id="_2YbP" test="&#34;$(variant)&#34;==&#34;web&#34;">
<BasicSequence id="_2Ybt">
<ClientScriptStep client="webClient" engine="web" id="_6wq3" interpreter="groovy" name="Determine servername">
<code>rc.setLocal("servername", "")

def maxRetries = 20;
def interval = 1000; // in milliseconds

def servername = ""

for (int i = 0; i &lt; maxRetries; i++) {
    def jproAppNode = rc.getComponent("genericDocument").getElementsByTagName("jpro-app")[0]
    servername = jproAppNode ? jproAppNode.getAttributeJS("data-server-name") : ""
    
    if(servername == null || servername == "") {
        rc.logMessage("Sleep, i: " + i)
        Thread.sleep(interval);
    } else {
        rc.logMessage("Found servername: " + servername)
        rc.setLocal("servername", servername)
        rc.check(i &lt; 10, "Getting servername should take less than 10 second. it took " + i + " seconds.")
        break;
    }
}
if(servername == null || servername == "") {
    rc.logMessage("Didn't find servername")
    rc.check(false, "Couldn't find servername")
    Thread.sleep(interval);
}

</code>
</ClientScriptStep>
<IfSequence id="_6wq6" name="Determine corresponding JPro client" test="&#34;$(servername)&#34; != &#34;&#34;">
<RepeatSequence count="$[len(rc.getStr(&#34;qftest&#34;,&#34;clients&#34;).split(&#34;\n&#34;))]" id="_6wqA" name="Test all clients" var="clientIndex">
<SetGlobalStep id="_6wqD" local="true" varname="candidate">
<default>$[rc.getStr("qftest","clients").split("\n")[rc.getInt("clientIndex")]]</default>
</SetGlobalStep>
<TryStep id="_6wqE" name="Try to get servername from client process">
<ClientScriptStep client="$(candidate)" engine="fx" id="_6wqH" interpreter="groovy" name="get servername of client from system properties">
<code>def prop = System.getProperty("jpro.servername")
println("servername is: " + prop)
if (prop &amp;&amp; prop == rc.getStr("servername")) {
    rc.setGlobal("JProServer", rc.getStr("candidate"))
    throw new BreakException() // done
}</code>
</ClientScriptStep>
<CatchSequence exception="TestException" id="_6wqF" maxerror="0">
<CommentStep id="_6wqG">
<heading>Not a FX client...</heading>
</CommentStep>
</CatchSequence>
</TryStep>
</RepeatSequence>
<ElseSequence id="_6wq7" name="Use default client name">
<ThrowStep id="_6wqL" throwmessage="JProServer not found"/>
</ElseSequence>
</IfSequence>
<SetGlobalStep id="_6wqI" varname="client">
<default>$(JProServer)</default>
</SetGlobalStep>
<TryStep id="_2YVX" name="Prüfen, ob bereits eine Verbindung zwischen FX und Web Client besteht $(engine)">
<ClientWaiter client="$(client)" engine="$(engine)" id="_2YVY"/>
<ClientScriptStep client="$(client)" engine="$(engine)" id="_2YVZ">
<code>from de.qfs.apps.qftest.client import Client
webClient = Client.instance().getForeignPlayback()
rc.logMessage("webClient: %s" % webClient)
rc.setLocal("_webclientInfo", str(webClient))
</code>
</ClientScriptStep>
<ServerScriptStep id="_2YVa">
<code>from de.qfs.apps.qftest.run import TestServerImpl
ts = TestServerImpl.instance()
webClient = ts.getPlayback("webClient")
rc.logMessage("webClient: %s" % webClient)
rc.setLocal("connected", str(webClient) == rc.lookup("_webclientInfo"))
</code>
</ServerScriptStep>
<CatchSequence exception="ClientNotConnectedException" id="_2YVb" maxerror="0">
<SetGlobalStep id="_2YVc" local="true" varname="newclient">
<default>true</default>
</SetGlobalStep>
</CatchSequence>
</TryStep>
</BasicSequence>
<IfSequence id="_2YVd" test="not $(connected)">
<BasicSequence id="_2YVe" name="FX und Web Client miteinander verbinden">
<CommentStep id="_2YVf">
<heading>Warten, bis FX Client bereit ist</heading>
</CommentStep>
<ClientWaiter client="$(client)" engine="$(engine)" id="_2YVg" timeout="0"/>
<SetGlobalStep disabled="true" id="_6wqM" varname="client">
<default>$(JProServer)</default>
</SetGlobalStep>
<ProcedureCall disabled="true" id="_6wqJ" procedure="qfs.client.renameClient">
<variable name="oldName">$(JProServer)</variable>
<variable name="newName">$(client)</variable>
<variable name="trueName">$$(client)</variable>
</ProcedureCall>
<BasicSequence id="_2YVr" name="Verbinden der beiden Clients">
<ServerScriptStep id="_2YVs" name="Verknüpfen der beiden Engines">
<code>from de.qfs.apps.qftest.run import TestServerImpl
ts = TestServerImpl.instance()
fxClient = ts.getPlayback(rc.lookup("client"))
webClient = ts.getPlayback("webClient")
fxClient.setForeignPlayback(webClient)
rc.logMessage("FX client: %s, Web client: %s" % (fxClient, webClient))</code>
</ServerScriptStep>
<ClientScriptStep client="$(client)" engine="fx" id="_2YVt" interpreter="groovy" name="Spezielle interne Einstellungen für den FX Client">
<code>rc.setOption(Options.OPT_FX_USE_AWT_ROBOT, false)
rc.setOption(Options.OPT_PLAY_FORCED_RAISE_WITH_CONTROL, false)
rc.setOption(Options.OPT_PLAY_LINUX_FORCED_RAISE_WITH_TOPMOST, false)</code>
</ClientScriptStep>
<ClientScriptStep client="webClient" engine="web" id="_2YVu" interpreter="groovy" name="Spezielle interne Einstellungen für den Web Client">
<code>rc.setOption(Options.OPT_JIB_RECORD_WEB_FILTER_JIB_COMPONENTS, true)
</code>
</ClientScriptStep>
</BasicSequence>
</BasicSequence>
</IfSequence>
</IfSequence>
<BasicSequence id="_2YXX" name="Setze Event-Optionen">
<ProcedureCall id="_2YXY" procedure="qfs.jib.options.replayFXHardMouseEventAs">
<variable name="clicktype">hard</variable>
</ProcedureCall>
<ProcedureCall id="_2YXZ" procedure="qfs.jib.options.replayFXSoftMouseEventAs">
<variable name="clicktype">semihard</variable>
</ProcedureCall>
</BasicSequence>
</SetupSequence>
</Dependency>
</Package>
<Procedure id="_2Yba" name="runOnSystem">
<variable name="os"/>
<comment>Determine if the specified os is the same as the os of the machine running the test.

@param os - the operating system to check for
@returns true if the specified os meets the running os, false otherwhise</comment>
<ServerScriptStep id="_2Ybj" interpreter="groovy">
<code>def os = rc.lookup("os")
def runOnSystem = false
if (os.contains("macos") &amp;&amp; rc.getBool("qftest","macOS")) {
    runOnSystem = true
}
if (os.contains("windows") &amp;&amp; rc.getBool("qftest","windows")){
    runOnSystem = true
}
if (os.contains("linux") &amp;&amp; rc.getBool("qftest","linux")){
    runOnSystem = true
}
rc.setLocal("runOnSystem",runOnSystem)</code>
</ServerScriptStep>
<ReturnStep id="_2Ybo" retval="$(runOnSystem)"/>
</Procedure>
</PackageRoot>
<ExtraSequence id="_4"/>
<WindowList id="_5"/>
</RootStep>
