<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE RootStep>
<RootStep id="_0" indentation="0" linelength="160" name="root" version="8.0.0">
<include>qfs.qft</include>
<TestSet id="_1" name="unnamed">
<TestCase id="_2" name="unnamed"/>
</TestSet>
<PackageRoot id="_3">
<Package id="_6wrN" name="internal">
<Procedure id="_6wqO" name="openBrowser">
<variable name="url"/>
<variable name="browser">auto</variable>
<variable name="webmode">auto</variable>
<ServerScriptStep id="_2Ybj" interpreter="groovy" name="Set default values">
<code>def browser = rc.getStr("browser")
def webmode = rc.getStr("webmode")

if(browser == "auto") {
    browser = "chrome"
    rc.setLocal("browser",browser)
}

if(webmode == "auto") {
    if (browser == "firefox" || browser == "safari") {
        rc.setLocal("webmode", "webdriver")   
    } else {
        rc.setLocal("webmode", "cdpdriver")          
    }
}
</code>
</ServerScriptStep>
<LogMessageStep clientInfo="false" clientScreenshots="-1" dontcompact="false" errorlevel="1" id="_6wr9" report="false" screenshots="-1">
<text>browser: $(browser), webdriver: $(webmode)</text>
</LogMessageStep>
<ProcedureCall id="_6wrT" procedure="waitForServer">
<variable name="url">$(url)</variable>
</ProcedureCall>
<BasicSequence id="_3NC" name="Web-Engine starten">
<BrowserClientStarter browser="$(browser)" client="webClient" connectionmode="${default:webmode:webdriver}" executable="${qftest:java}" id="_3ND"
                      openwindow="false"/>
<ClientWaiter client="webClient" id="_3NE"/>
</BasicSequence>
<BasicSequence id="_1pHV" name="Einstellungen für Browser setzen">
<ProcedureCall id="_1pHW" procedure="qfs.web.browser.settings.doStartupSettings">
<variable name="client">webClient</variable>
<variable name="browser">$(browser)</variable>
<variable name="emptyCache">true</variable>
<variable name="enableCookies">true</variable>
<variable name="deleteCookies">true</variable>
<variable name="locale">de</variable>
<variable name="enableProxy">false</variable>
<variable name="proxyAddress"/>
<variable name="proxyPort"/>
<variable name="proxyAutoconfigurl"/>
<variable name="enableProxyBypass">false</variable>
<variable name="proxyBypass"/>
<variable name="mozprofile"/>
<variable name="compatibilitymode">no</variable>
</ProcedureCall>
</BasicSequence>
<BasicSequence id="_1pHX" name="Browserfenster öffnen">
<BrowserClientStarter browser="${default:browser:chrome}" client="webClient" executable="${qftest:java}" height="900" id="_1pHY" openwindow="true"
                      url="$(url)"/>
<DocumentWaiter client="webClient" component="genericDocument" id="_1pHZ" timeout="60000"/>
</BasicSequence>
<BasicSequence id="_1pHa" name="CustomWebResolver installieren">
<InstallCWRStep client="webClient" engine="web" id="_2YPJ">
<code>ignoreTags:
- DIV
- SPAN
genericClasses: []</code>
<comment>Mit einem CustomWebResolver übersetzen Sie die Spezifika
der Komponenten Ihrer Webanwendung in generische Klassen,
die QF-Test versteht.
Dadurch werden die Komponentenerkennung drastisch verbessert
und spezifischere Checks ermöglicht.
Die wichtigste Kategorie ist "genericClasses". Hier können
Sie HTML-Elemente generischen Klassen zuweisen anhand deren
HTML-Tags, CSS-Klassen oder HTML-Attributen.
Für weitere Informationen und Beispiele wählen Sie "Was ist
das?" im Kontextmenü des Knotens.</comment>
</InstallCWRStep>
</BasicSequence>
<ReturnStep id="_6wrA" retval="webClient"/>
</Procedure>
<Procedure id="_6" name="connectJProClient">
<variable name="webClient"/>
<comment>A usable client is put in the client variable.</comment>
<ClientScriptStep client="$(webClient)" engine="web" id="_6wq3" interpreter="groovy" name="Determine servername">
<code>import java.time.Instant;

rc.setLocal("servername", "");

def maxRetries = 200;
def interval = 100; // in milliseconds

def servername = "";
Instant startTime = Instant.now();
def document = null;

for (int i = 0; i &lt; maxRetries; i++) {
    if(document == null) {
        document = rc.getComponent("genericDocument");
    }
    if(document != null) {
        def jproAppNode = document.getElementsByTagName("jpro-app")[0];
        servername = jproAppNode ? jproAppNode.getAttributeJS("data-server-name") : "";   
    }
    
    if (servername == null || servername.isEmpty()) {
        Thread.sleep(interval);
    } else {
        Instant endTime = Instant.now();
        long elapsedMillis = java.time.Duration.between(startTime, endTime).toMillis();

        rc.logMessage("Found servername: " + servername);
        rc.logMessage("Time taken to find servername: " + elapsedMillis + " milliseconds");
        
        rc.setLocal("servername", servername);
        rc.check(i &lt; 100, "Getting servername should take less than 10 seconds. It took " + (elapsedMillis / 1000) + " seconds.");
        break;
    }
}

if (servername == null || servername.isEmpty()) {
    rc.logMessage("Didn't find servername");
    rc.logMessage("&lt;jpro-app&gt;: " + rc.getComponent("genericDocument").getElementsByTagName("jpro-app")[0]);
    rc.check(false, "Couldn't find servername");
    throw Exception("Couldn't find servername")
}</code>
</ClientScriptStep>
<LogMessageStep clientInfo="false" clientScreenshots="-1" dontcompact="false" errorlevel="1" id="_6wrV" report="false" screenshots="-1">
<text>Servername: $(servername)</text>
</LogMessageStep>
<SetGlobalStep id="_6wrW" local="true" varname="candidates">
<default>$[rc.getStr("qftest","clients")]</default>
</SetGlobalStep>
<LogMessageStep clientInfo="false" clientScreenshots="-1" dontcompact="false" errorlevel="1" id="_6wrX" report="false" screenshots="-1">
<text>Candidates: $(servername)</text>
</LogMessageStep>
<RepeatSequence count="$[len(rc.getStr(&#34;candidates&#34;).split(&#34;\n&#34;))]" id="_6wqA" name="Test all clients" var="clientIndex">
<SetGlobalStep id="_6wqD" local="true" varname="candidate">
<default>$[rc.getStr("candidates").split("\n")[rc.getInt("clientIndex")]]</default>
</SetGlobalStep>
<TryStep id="_6wqE" name="Try to get servername from client process">
<ClientScriptStep client="$(candidate)" id="_6wqH" interpreter="groovy" name="get servername of client from system properties">
<code>def currentServername = System.getProperty("jpro.servername")
def candidate = null
rc.logMessage("servername is: " + currentServername + " for candidate: " + rc.getStr("candidate"))
if (currentServername &amp;&amp; currentServername == rc.getStr("servername")) {
    candidate = rc.getStr("candidate")
    rc.logMessage("servername " + currentServername + " matches client: " + candidate)
    rc.setLocal("JProServer", candidate)
    throw new BreakException() // done
}</code>
</ClientScriptStep>
</TryStep>
</RepeatSequence>
<SetGlobalStep id="_6wqI" varname="client">
<default>$(JProServer)</default>
</SetGlobalStep>
<TryStep id="_2YVX" name="Prüfen, ob bereits eine Verbindung zwischen FX und Web Client besteht $(engine)">
<ClientWaiter client="$(client)" engine="fx" id="_2YVY"/>
<ClientScriptStep client="$(client)" engine="fx" id="_2YVZ">
<code>from de.qfs.apps.qftest.client import Client
webClient = Client.instance().getForeignPlayback()
rc.logMessage("webClient: %s" % webClient)
rc.setLocal("_webclientInfo", str(webClient))
</code>
</ClientScriptStep>
<ServerScriptStep id="_2YVa">
<code>from de.qfs.apps.qftest.run import TestServerImpl
ts = TestServerImpl.instance()
webClient = ts.getPlayback("webClient")
rc.logMessage("webClient: %s" % webClient)
rc.setLocal("connected", str(webClient) == rc.lookup("_webclientInfo"))
</code>
</ServerScriptStep>
<CatchSequence exception="ClientNotConnectedException" id="_2YVb" maxerror="0">
<SetGlobalStep id="_2YVc" local="true" varname="newclient">
<default>true</default>
</SetGlobalStep>
</CatchSequence>
</TryStep>
<BasicSequence id="_2YVr" name="Verbinden der beiden Clients">
<ServerScriptStep id="_2YVs" name="Verknüpfen der beiden Engines">
<code>from de.qfs.apps.qftest.run import TestServerImpl
ts = TestServerImpl.instance()
fxClient = ts.getPlayback(rc.lookup("client"))
webClient = ts.getPlayback(rc.lookup("webClient"))
fxClient.setForeignPlayback(webClient)
rc.logMessage("FX client: %s, Web client: %s" % (fxClient, webClient))</code>
</ServerScriptStep>
<ClientScriptStep client="$(client)" engine="fx" id="_2YVt" interpreter="groovy" name="Spezielle interne Einstellungen für den FX Client">
<code>rc.setOption(Options.OPT_FX_USE_AWT_ROBOT, false)
rc.setOption(Options.OPT_PLAY_FORCED_RAISE_WITH_CONTROL, false)
rc.setOption(Options.OPT_PLAY_LINUX_FORCED_RAISE_WITH_TOPMOST, false)</code>
</ClientScriptStep>
<ClientScriptStep client="$(webClient)" engine="web" id="_2YVu" interpreter="groovy" name="Spezielle interne Einstellungen für den Web Client">
<code>rc.setOption(Options.OPT_JIB_RECORD_WEB_FILTER_JIB_COMPONENTS, true)
</code>
</ClientScriptStep>
</BasicSequence>
</Procedure>
</Package>
<Procedure id="_6wqP" name="waitForServer">
<variable name="url"/>
<comment>Waits for Server to be alive.</comment>
<ServerScriptStep id="_6wqy" interpreter="groovy" name="Wait for Server $(url)">
<code>int timeout = 60000  // 60 seconds in milliseconds
int interval = 5000  // Check every 5 seconds
long requestTimeout = 2000 // 2 seconds timeout for the HTTP request
long startTime = System.currentTimeMillis()
boolean responsePositive = false
String urlString = rc.lookup("url") + "/status/alive"

rc.logMessage("Testing the url: " + urlString);

while (System.currentTimeMillis() - startTime &lt; timeout) {
    try {
        // Send HTTP request to check response
        def url = new URL(urlString)
        def connection = url.openConnection()
        
        connection.setConnectTimeout((int) requestTimeout) // Timeout for establishing the connection
        connection.setReadTimeout((int) requestTimeout) 
        
        connection.setRequestMethod("GET")
        int responseCode = connection.responseCode
        
        if (responseCode == 200) {  // Assuming HTTP 200 means a positive response
            responsePositive = true
            break
        }
    } catch (Exception e) {
        // Catch any exception, e.g., if server is unreachable, and try again
        rc.logMessage("Got error: '" + e.getMessage() + "' trying again.");
        sleep(1000)
    }
    
    // Wait for the interval before trying again
    Thread.sleep(interval)
}

if (responsePositive) {
    // Response was positive, perform desired action
    rc.logMessage("Page responded positively after " + (System.currentTimeMillis() - startTime) + " milliseconds.")
} else {
    // Timeout reached without positive response
    throw new TestException("Page did not respond positively within the timeout.")
}</code>
</ServerScriptStep>
</Procedure>
<Procedure id="_6wrF" name="connectFXClient">
<variable name="fxClient"/>
<variable name="browser">auto</variable>
<variable name="webmode">auto</variable>
<variable name="url">fillout</variable>
<variable name="variant">jpro</variable>
<comment>variant can be either jpro or desktop</comment>
<IfSequence id="_6wrL" test="&#34;$(variant)&#34;==&#34;web&#34;">
<BasicSequence id="_6wrO" name="JPro">
<ProcedureCall id="_6wqc" procedure="internal.openBrowser" retvarname="webClient">
<variable name="url">$(url)</variable>
<variable name="browser">$(browser)</variable>
<variable name="webmode">$(webmode)</variable>
</ProcedureCall>
<ProcedureCall id="_6wqR" procedure="internal.connectJProClient">
<variable name="webClient">webClient</variable>
</ProcedureCall>
</BasicSequence>
<ElseifSequence id="_6wrQ" test="&#34;$(variant)&#34;==&#34;desktop&#34;">
<BasicSequence id="_6wrP" name="Desktop">
<SetGlobalStep id="_6wrU" varname="client">
<default>$(fxClient)</default>
</SetGlobalStep>
<ProcedureCall id="_2YXY" procedure="qfs.jib.options.replayFXHardMouseEventAs">
<variable name="clicktype">hard</variable>
</ProcedureCall>
<ProcedureCall id="_2YXZ" procedure="qfs.jib.options.replayFXSoftMouseEventAs">
<variable name="clicktype">semihard</variable>
</ProcedureCall>
<ReturnStep id="_6wrS" retval="$(fxClient)"/>
</BasicSequence>
</ElseifSequence>
<ElseSequence id="_6wrM">
<LogMessageStep clientInfo="true" clientScreenshots="-1" errorlevel="3" id="_6wrR" screenshots="-1">
<text>Unknown variant $(variant)</text>
</LogMessageStep>
</ElseSequence>
</IfSequence>
</Procedure>
<Procedure id="_6wrG" name="stopFXClient">
<TryStep id="_2YOU" name="Verbindung zwischen Web und FX Clients lösen">
<ClientWaiter client="$(client)" engine="fx" id="_2YOV" timeout="0"/>
<ClientScriptStep client="$(client)" engine="fx" id="_2YOW">
<code>from de.qfs.apps.qftest.client import Client
Client.instance().setForeignPlayback(None)</code>
</ClientScriptStep>
<CatchSequence exception="ClientNotConnectedException" id="_2YOX" maxerror="0"/>
</TryStep>
<TryStep id="_2YS7" name="Browser schließen">
<WindowEventStep client="webClient" component="genericDocument" event="WINDOW_CLOSING" id="_2YS8"/>
<TryStep id="_2YS9" name="Browser beendet?">
<ProcessWaiter client="webClient" id="_2YSB" timeout="10000"/>
<CatchSequence exception="ClientNotTerminatedException" id="_2YSC" maxerror="0">
<TryStep id="_2YSD" name="Browser hart beenden">
<ClientStopper client="webClient" id="_2YSE"/>
<ProcessWaiter client="webClient" id="_2YSF" timeout="10000"/>
<CatchSequence exception="TestException" id="_2YSG" maxerror="0"/>
</TryStep>
</CatchSequence>
</TryStep>
<CatchSequence exception="TestException" id="_2YSH" maxerror="0"/>
</TryStep>
</Procedure>
</PackageRoot>
<ExtraSequence id="_4">
<CommentStep id="_2YZi">
<heading>Can we refer to the Data Table?</heading>
</CommentStep>
<TableDataBinder id="_2YZh" name="variants">
<TableBinderColumn title="variant" width="137">
<data>web</data>
<data>web</data>
<data>web</data>
<data>web</data>
<data>desktop</data>
</TableBinderColumn>
<TableBinderColumn title="browser" width="148">
<data>chrome</data>
<data>firefox</data>
<data>edge</data>
<data>safari</data>
<data/>
</TableBinderColumn>
<TableBinderColumn title="os" width="556">
<data>windows,linux,macos</data>
<data>windows,linux</data>
<data>windows</data>
<data>macos</data>
<data>windows,linux,macos</data>
</TableBinderColumn>
</TableDataBinder>
</ExtraSequence>
<WindowList id="_5"/>
</RootStep>
