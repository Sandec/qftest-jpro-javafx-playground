name: base

on:
  workflow_call:
    inputs:
      os: # the variable you can use in place of a matrix
        required: true
        type: string
    secrets:   # Add this section to ensure secrets are accessible
      QFTEST_LICENSE:  # Define the secret to be passed from the caller
        required: true
env:
  QFTEST_LICENSE: ${{ secrets.QFTEST_LICENSE }}
jobs:
  builds:
    name: '${{ inputs.os }}'
    runs-on: ${{ inputs.os }}
    timeout-minutes: 40
    env:
      USE_JAVAFX: ${{ inputs.javafx }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install JPro requirements
        if: runner.os == 'Linux'
        run: |
          echo "Installing JPro requirements"
          sudo apt-get install -y xorg libgtk-3-0
          sudo apt-get install -y wget software-properties-common
          
          echo "Installing Chrome requirements"
          sudo apt-get install libgtk2.0-0

      - name: Grant microphone access on macOS
        if: runner.os == 'macOS'
        run: |
          sqlite3 $HOME/Library/Application\ Support/com.apple.TCC/TCC.db "INSERT OR IGNORE INTO access VALUES ('kTCCServiceMicrophone','/usr/local/opt/runner/provisioner/provisioner',1,2,4,1,NULL,NULL,0,'UNUSED',NULL,0,1687786159,NULL,NULL,'UNUSED',1687786159);"

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
      # seems to break more than it fixes
      #- name: install-edge
      #  uses: browser-actions/setup-edge@v1
      #- name: install-firefox
      #  uses: browser-actions/setup-firefox@v1
      - name: Browser Setups
        shell: bash
        run: |
          echo "Setting up browsers"
          if [[ "$OSTYPE" == "linux"* ]]; then
            ./setupPolicyLinux.sh
          fi
      - name: Create QF-Test License
        shell: bash
        run: |
          echo "Creating QF-Test License"
          echo "${{ secrets.QFTEST_LICENSE }}" > qftest.license
          if [[ "$OSTYPE" == "linux"* ]]; then
            ls -alh qftest.license
          fi
      - name: Run QF-Test
        shell: bash
        run: |
          echo "Running QF-Test"
          echo "JAVA_HOME: $JAVA_HOME"
          echo "PATH: $PATH"
          if [[ "$OSTYPE" == "linux"* ]]; then
            echo "Detected Linux OS"
            export DISPLAY=:99.0 && /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1280x1024x16;
          fi
          ./gradlew test
      - name: QF-Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'qftest-report-${{ github.run_id }}-os-${{ inputs.os }}'
          path: |
            qftest
          retention-days: 14